
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "gallery/glasbey-colormap.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_gallery_glasbey-colormap.py>`
        to download the full example as a Python script or as a
        Jupyter notebook.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_gallery_glasbey-colormap.py:


Glasbey colormap
================

A long-requested feature [1]_ for napari was to display labels/segmentation
layers using a well-known discrete colormap such as Glasbey [2]_.

In this example, we demonstrate displaying segmentations using custom colormaps
with the help of the glasbey Python library [3]_, which you can install with
your favorite Python package manager, such as pip or conda. We display a
segmentation using the napari built-in labels colormap, the original Glasbey
colormap, a more modern version produced by limiting the lightness and chroma
and optimizing for colorblind-safety, and finally with the matplotlib tab10
colormap.

.. [1] https://github.com/napari/napari/issues/454
.. [2] Colour displays for categorical images. Chris Glasbey, Gerie van der
       Heijden, Vivian F. K. Toh, and Alision Gray. (2007)
       DOI:10.1002/col.20327
.. [3] https://github.com/lmcinnes/glasbey

.. tags:: layers, visualization-basic

.. GENERATED FROM PYTHON SOURCE LINES 24-36

.. code-block:: Python

    import glasbey
    import numpy as np
    from skimage import data
    from skimage.filters import threshold_otsu
    from skimage.measure import label
    from skimage.morphology import closing, remove_small_objects
    from skimage.segmentation import clear_border

    import napari

    image = data.coins()[50:-50, 50:-50]








.. GENERATED FROM PYTHON SOURCE LINES 37-38

First, we segment the image.

.. GENERATED FROM PYTHON SOURCE LINES 38-49

.. code-block:: Python


    # apply threshold
    thresh = threshold_otsu(image)
    bw = closing(image > thresh, footprint=np.ones((4, 4), dtype=bool))

    # remove artifacts connected to image border
    cleared = remove_small_objects(clear_border(bw), 20)

    # label image regions
    label_image = label(cleared).astype("uint8")








.. GENERATED FROM PYTHON SOURCE LINES 50-53

Then, we create two color palettes using the glasbey library. One with the
original glasbey parameters and 256 colors, and a more modern one with better
lightness and chroma bounds for a less glary look.

.. GENERATED FROM PYTHON SOURCE LINES 53-64

.. code-block:: Python


    # original glasbey
    glas = glasbey.create_palette(256)

    # more optimized glasbey
    glas19mid = glasbey.create_palette(
            19,
            lightness_bounds=(20, 60), chroma_bounds=(40, 50),
            colorblind_safe=True,
            )








.. GENERATED FROM PYTHON SOURCE LINES 65-67

Finally, we display the coins image and the overlaid segmentation. We do this
in two viewers to show both colormaps.

.. GENERATED FROM PYTHON SOURCE LINES 67-84

.. code-block:: Python


    viewer, image_layer = napari.imshow(image, name='coins')

    # add the labels
    label_layer_glas = viewer.add_labels(
            label_image, name='segmentation', colormap=glas
            )

    viewer2, image_layer2 = napari.imshow(image, name='coins')

    label_layer_modern = viewer2.add_labels(
            label_image, name='segmentation-glasbey-19-mid-chroma', colormap=glas19mid,
            )


    if __name__ == '__main__':
        napari.run()



.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /gallery/images/sphx_glr_glasbey-colormap_001.png
          :alt: glasbey colormap
          :srcset: /gallery/images/sphx_glr_glasbey-colormap_001.png
          :class: sphx-glr-multi-img

    *

      .. image-sg:: /gallery/images/sphx_glr_glasbey-colormap_002.png
          :alt: glasbey colormap
          :srcset: /gallery/images/sphx_glr_glasbey-colormap_002.png
          :class: sphx-glr-multi-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 10.815 seconds)


.. _sphx_glr_download_gallery_glasbey-colormap.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: glasbey-colormap.ipynb <glasbey-colormap.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: glasbey-colormap.py <glasbey-colormap.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: glasbey-colormap.zip <glasbey-colormap.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
