
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "gallery/surface_multi_texture.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_gallery_surface_multi_texture.py>`
        to download the full example as a Python script or as a
        Jupyter notebook.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_gallery_surface_multi_texture.py:


Surface with multiple textures
==============================

This example demonstrates one possible method for displaying a 3D surface with
multiple textures.

Thanks to Emmanuel Reynaud and Luis Gutierrez for providing the gorgeous coral
model for this demo. You can find the data on FigShare:
https://zenodo.org/records/13380203

More information on the methods used to generate this model can be found in *L.
Gutierrez-Heredia, C. Keogh, E. G. Reynaud, Assessing the Capabilities of
Additive Manufacturing Technologies for Coral Studies, Education, and
Monitoring. Front. Mar. Sci. 5 (2018), doi:10.3389/fmars.2018.00278.*

A bit about 3D models
---------------------

A standard way to define a 3D model (mesh, or Surface in napari) is by listing
vertices (3D point coordinates) and faces (triplets of vertex indices - each
face is a triangle in 3D space). Meshes are often stored in "Wavefront" (.obj)
files, which may have companion material (.mtl) files that describe some
shading properties (base color, shinyness, etc.) for different parts of the
model.

In some cases, the color of a vertex is given by a single point value that is
then colormapped on the fly (`vertex_values`). In other cases, each vertex or
face may be assigned a specific color (`vertex_colors`). These methods are
demonstrated in :ref:`sphx_glr_gallery_surface_texture_and_colors.py`.

In the case of "photorealistic" models, the color of each vertex is instead
determined by mapping a vertex to a point in an image called a texture using 2D
texture coordinates in the range [0, 1]. The color of each individual pixel is
smoothly interpolated (sampled) on the fly from the texture (the GPU makes this
interpolation very fast).

Napari does not (yet) support models with multiple textures or materials. If
the textures don't overlap, you can display them on separate meshes as shown in
this demo. If the textures do overlap, you may instead be able to combine the
textures as images. This relies on textures having the same texture
coordinates, and may require resizing the textures to match each other.

.. tags:: visualization-nD

.. GENERATED FROM PYTHON SOURCE LINES 46-54

.. code-block:: Python

    import os

    import matplotlib.pyplot as plt
    import pooch
    from vispy.io import imread, read_mesh

    import napari








.. GENERATED FROM PYTHON SOURCE LINES 55-57

Download the model
------------------

.. GENERATED FROM PYTHON SOURCE LINES 57-79

.. code-block:: Python

    download = pooch.DOIDownloader(progressbar=True)
    doi = '10.5281/zenodo.13380203'
    tmp_dir = pooch.os_cache('napari-surface-texture-example')
    os.makedirs(tmp_dir, exist_ok=True)
    data_files = {
        'mesh': 'PocilloporaDamicornisSkin.obj',
        # "materials": "PocilloporaVerrugosaSkinCrop.mtl",  # not yet supported
        'Texture_0': 'PocilloporaDamicornisSkin_Texture_0.jpg',
        'GeneratedMat2': 'PocilloporaDamicornisSkin_GeneratedMat2.png',
    }
    print(f'downloading data into {tmp_dir}')
    for file_name in data_files.values():
        if not (tmp_dir / file_name).exists():
            print(f'downloading {file_name}')
            download(
                f'doi:{doi}/{file_name}',
                output_file=tmp_dir / file_name,
                pooch=None,
            )
        else:
            print(f'using cached {tmp_dir / file_name}')





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    downloading data into /home/runner/.cache/napari-surface-texture-example
    downloading PocilloporaDamicornisSkin.obj
      0%|                                              | 0.00/93.8M [00:00<?, ?B/s]      0%|                                      | 15.4k/93.8M [00:00<13:01, 120kB/s]      0%|                                      | 49.2k/93.8M [00:00<07:09, 218kB/s]      0%|                                       | 116k/93.8M [00:00<04:06, 380kB/s]      0%|                                       | 249k/93.8M [00:00<02:16, 685kB/s]      1%|▏                                     | 526k/93.8M [00:00<01:11, 1.31MB/s]      1%|▍                                    | 1.07M/93.8M [00:00<00:37, 2.46MB/s]      2%|▊                                    | 2.16M/93.8M [00:00<00:19, 4.78MB/s]      5%|█▋                                   | 4.35M/93.8M [00:00<00:09, 9.35MB/s]      8%|███                                  | 7.66M/93.8M [00:01<00:05, 15.2MB/s]     12%|████▎                                | 10.8M/93.8M [00:01<00:04, 18.9MB/s]     15%|█████▌                               | 14.0M/93.8M [00:01<00:03, 21.6MB/s]     18%|██████▋                              | 17.0M/93.8M [00:01<00:03, 23.1MB/s]     22%|███████▉                             | 20.2M/93.8M [00:01<00:03, 24.5MB/s]     25%|█████████▏                           | 23.2M/93.8M [00:01<00:02, 24.9MB/s]     28%|██████████▎                          | 26.2M/93.8M [00:01<00:02, 25.3MB/s]     31%|███████████▌                         | 29.2M/93.8M [00:01<00:02, 25.6MB/s]     35%|████████████▊                        | 32.5M/93.8M [00:01<00:02, 26.6MB/s]     38%|█████████████▉                       | 35.3M/93.8M [00:02<00:02, 25.9MB/s]     41%|███████████████▎                     | 38.9M/93.8M [00:02<00:01, 27.5MB/s]     45%|████████████████▌                    | 42.0M/93.8M [00:02<00:01, 27.3MB/s]     49%|██████████████████▏                  | 46.0M/93.8M [00:02<00:01, 28.8MB/s]     53%|███████████████████▍                 | 49.2M/93.8M [00:02<00:01, 28.6MB/s]     56%|████████████████████▊                | 52.8M/93.8M [00:02<00:01, 29.4MB/s]     60%|██████████████████████▏              | 56.4M/93.8M [00:02<00:01, 29.9MB/s]     64%|███████████████████████▍             | 59.5M/93.8M [00:02<00:01, 29.2MB/s]     67%|████████████████████████▉            | 63.1M/93.8M [00:03<00:01, 29.8MB/s]     71%|██████████████████████████▎          | 66.7M/93.8M [00:03<00:00, 30.2MB/s]     75%|███████████████████████████▋         | 70.2M/93.8M [00:03<00:00, 30.3MB/s]     79%|█████████████████████████████        | 73.7M/93.8M [00:03<00:00, 30.4MB/s]     82%|██████████████████████████████▍      | 77.1M/93.8M [00:03<00:00, 30.1MB/s]     86%|███████████████████████████████▊     | 80.7M/93.8M [00:03<00:00, 30.5MB/s]     90%|█████████████████████████████████▏   | 84.2M/93.8M [00:03<00:00, 30.6MB/s]     93%|██████████████████████████████████▌  | 87.5M/93.8M [00:03<00:00, 31.3MB/s]     97%|███████████████████████████████████▊ | 90.6M/93.8M [00:03<00:00, 30.2MB/s]    100%|████████████████████████████████████▉| 93.7M/93.8M [00:04<00:00, 29.4MB/s]      0%|                                              | 0.00/93.8M [00:00<?, ?B/s]    100%|██████████████████████████████████████| 93.8M/93.8M [00:00<00:00, 552GB/s]
    downloading PocilloporaDamicornisSkin_Texture_0.jpg
      0%|                                              | 0.00/17.3M [00:00<?, ?B/s]      0%|                                     | 14.3k/17.3M [00:00<02:55, 98.3kB/s]      0%|                                      | 49.2k/17.3M [00:00<01:23, 207kB/s]      1%|▎                                      | 114k/17.3M [00:00<00:47, 360kB/s]      1%|▌                                      | 251k/17.3M [00:00<00:25, 679kB/s]      3%|█▏                                    | 523k/17.3M [00:00<00:13, 1.28MB/s]      6%|██▎                                  | 1.06M/17.3M [00:00<00:06, 2.43MB/s]     12%|████▌                                | 2.16M/17.3M [00:00<00:03, 4.74MB/s]     25%|█████████▎                           | 4.35M/17.3M [00:00<00:01, 9.29MB/s]     41%|███████████████▏                     | 7.08M/17.3M [00:01<00:00, 13.8MB/s]     63%|███████████████████████▍             | 10.9M/17.3M [00:01<00:00, 19.5MB/s]     81%|██████████████████████████████       | 14.0M/17.3M [00:01<00:00, 21.7MB/s]     99%|████████████████████████████████████▊| 17.2M/17.3M [00:01<00:00, 23.4MB/s]      0%|                                              | 0.00/17.3M [00:00<?, ?B/s]    100%|█████████████████████████████████████| 17.3M/17.3M [00:00<00:00, 99.8GB/s]
    downloading PocilloporaDamicornisSkin_GeneratedMat2.png
      0%|                                               | 0.00/120k [00:00<?, ?B/s]      9%|███▌                                  | 11.3k/120k [00:00<00:01, 99.3kB/s]     31%|███████████▉                           | 36.9k/120k [00:00<00:00, 173kB/s]     89%|███████████████████████████████████▍    | 106k/120k [00:00<00:00, 371kB/s]      0%|                                               | 0.00/120k [00:00<?, ?B/s]    100%|████████████████████████████████████████| 120k/120k [00:00<00:00, 742MB/s]




.. GENERATED FROM PYTHON SOURCE LINES 80-86

Load the model
--------------
Next, read the model data from the .obj file. Currently napari/vispy do not
support reading material properties (.mtl files) nor separate texture and
vertex indices (i.e. repeated vertices). Normal vectors read from the file
are also ignored and re-calculated from the faces.

.. GENERATED FROM PYTHON SOURCE LINES 86-88

.. code-block:: Python

    vertices, faces, _normals, texcoords = read_mesh(tmp_dir / data_files['mesh'])





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Notice reading .OBJ: material properties are ignored.




.. GENERATED FROM PYTHON SOURCE LINES 89-94

Load the textures
-----------------
This model comes with two textures: `Texture_0` is generated from
photogrammetry of the actual object, and `GeneratedMat2` is a generated
material to fill in  parts of the model lacking photographic texture.

.. GENERATED FROM PYTHON SOURCE LINES 94-97

.. code-block:: Python

    photo_texture = imread(tmp_dir / data_files['Texture_0'])
    generated_texture = imread(tmp_dir / data_files['GeneratedMat2'])








.. GENERATED FROM PYTHON SOURCE LINES 98-99

This is what the texture images look like in 2D:

.. GENERATED FROM PYTHON SOURCE LINES 99-110

.. code-block:: Python

    fig, axs = plt.subplots(1, 2)
    axs[0].set_title(f'Texture_0 {photo_texture.shape}')
    axs[0].imshow(photo_texture)
    axs[0].set_xticks((0, photo_texture.shape[1]), labels=(0.0, 1.0))
    axs[0].set_yticks((0, photo_texture.shape[0]), labels=(0.0, 1.0))
    axs[1].set_title(f'GeneratedMat2 {generated_texture.shape}')
    axs[1].imshow(generated_texture)
    axs[1].set_xticks((0, generated_texture.shape[1]), labels=(0.0, 1.0))
    axs[1].set_yticks((0, generated_texture.shape[0]), labels=(0.0, 1.0))
    fig.show()




.. image-sg:: /gallery/images/sphx_glr_surface_multi_texture_001.png
   :alt: Texture_0 (8192, 8192, 3), GeneratedMat2 (2048, 2048, 4)
   :srcset: /gallery/images/sphx_glr_surface_multi_texture_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 111-116

Create the napari layers
------------------------
Next create two separate layers with the same mesh - once with each texture.
In this example the texture coordinates happen to be the same for each
texture, but this is not a strict requirement.

.. GENERATED FROM PYTHON SOURCE LINES 116-129

.. code-block:: Python

    photo_texture_layer = napari.layers.Surface(
        (vertices, faces),
        texture=photo_texture,
        texcoords=texcoords,
        name='Texture_0',
    )
    generated_texture_layer = napari.layers.Surface(
        (vertices, faces),
        texture=generated_texture,
        texcoords=texcoords,
        name='GeneratedMat2',
    )








.. GENERATED FROM PYTHON SOURCE LINES 130-134

Add the layers to a viewer
--------------------------
Finally, create the viewer and add the Surface layers.
sphinx_gallery_thumbnail_number = 2

.. GENERATED FROM PYTHON SOURCE LINES 134-144

.. code-block:: Python

    viewer = napari.Viewer(ndisplay=3)

    viewer.add_layer(photo_texture_layer)
    viewer.add_layer(generated_texture_layer)

    viewer.camera.angles = (90.0, 0.0, -75.0)
    viewer.camera.zoom = 75

    if __name__ == '__main__':
        napari.run()



.. image-sg:: /gallery/images/sphx_glr_surface_multi_texture_002.png
   :alt: surface multi texture
   :srcset: /gallery/images/sphx_glr_surface_multi_texture_002.png
   :class: sphx-glr-single-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 29.587 seconds)


.. _sphx_glr_download_gallery_surface_multi_texture.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: surface_multi_texture.ipynb <surface_multi_texture.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: surface_multi_texture.py <surface_multi_texture.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: surface_multi_texture.zip <surface_multi_texture.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
